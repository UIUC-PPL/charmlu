mainmodule lu {
  extern module gpuwork;
  extern module scheduler;

  readonly CProxy_Main mainProxy;
  readonly CProxy_LUBlk luArrProxy;
  readonly CProxy_Scheduler scheduler;
  readonly CProxy_GPUWork gpu;

  readonly int gMatSize;
  readonly ComlibInstanceHandle multicastStats[4];
  readonly int traceTrailingUpdate;
  readonly int traceComputeU;
  readonly int traceComputeL;
  readonly int traceSolveLocalLU;
  readonly int doPrioritize;
//  readonly int memThreshold;

  message blkMsg {
    double data[];
  };

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry void finishInit();
    entry void continueIter();
    entry void arrayIsCreated(CkReductionMsg *);
    entry void outputStats();
    entry void terminateProg();
    entry void done();
    entry void iterationCompleted();
  };

  array [2D] LUBlk {
    entry LUBlk(void);
    entry void init(int whichMulticastStrategy, int, int, int memThreshold);
    entry void initVec(int size, double bvec[size]);
    entry void matrixUpdated(int a);
    entry void calcResiduals();
    entry [nokeep] void recvXvec(int size, double x[size]);
    entry void sumXvec(int size, double x[size]);
    entry void factor()
    {
	for (internalStep = 0;
	     internalStep < min(thisIndex.x, thisIndex.y);
	     internalStep++) {
	    overlap {
		when recvL[internalStep](blkMsg *mL) atomic
		{ CmiReference(UsrToEnv(mL)); L = mL; }
		when recvU[internalStep](blkMsg *mU) atomic
		{ CmiReference(UsrToEnv(mU)); U = mU; }
	    }
	    atomic {
		// Schedule the trailing update for sometime later
		thisProxy(thisIndex.x, thisIndex.y)
		    .processTrailingUpdate(internalStep);
	    }
	    when processTrailingUpdate[internalStep](int step) atomic {
                ckout << "processing for " << internalStep << " for (" << 
                thisIndex.x << ", " << thisIndex.y << ")" << endl;
		updateMatrix(L, U);
	    }
            when matrixUpdated[internalStep](int step) atomic {
                CmiFree(UsrToEnv(L)); CmiFree(UsrToEnv(U));
            }
	}

	if (thisIndex.x == thisIndex.y) atomic {
		ckout << "Block " << thisIndex.x << " queueing local LU" << endl;
		thisProxy(thisIndex.x, thisIndex.y).processLocalLU(0);
	}
	else if (thisIndex.x < thisIndex.y)
	    when recvL[internalStep](blkMsg *mL) atomic {
		CmiReference(UsrToEnv(mL)); L = mL;
		thisProxy(thisIndex.x, thisIndex.y).processComputeU(0);
	}
	else
	    when recvU[internalStep](blkMsg *mU) atomic {
		CmiReference(UsrToEnv(mU)); U = mU;
		thisProxy(thisIndex.x, thisIndex.y).processComputeL(0);
	}
    };

    // These entry methods are the targets of the row- and column-wise
    // multicasts each block makes.
    //
    // These methods reference but will not modify the messages
    // delivered to them. Thus, we can use the [nokeep] annotation to
    // tell the runtime that it can safely deliver the same message
    // instance to every object on a processor, rather than making a
    // separate copy for each object.
    entry [nokeep] void recvL(blkMsg *);
    entry [nokeep] void recvU(blkMsg *);

    // These process* entry methods are invoked locally by each block
    // on itself with varying priorities, to let the scheduler decide
    // when the work they represent (the bulk of the computation)
    // should execute.
    //
    // When a block computes a trailing update, it no longer needs to
    // retain the incoming data from the corresponding row and column
    // updates. The [memcritical] annotation tells the runtime that it
    // should schedule invocations of this entry method when it is in
    // a memory critical (i.e. over threshold) condition, so that
    // retained messages can be freed.
    entry [memcritical] void processTrailingUpdate(int ignoredParam);
    entry void processLocalLU(int ignoredParam);
    // These two free buffered messages, but don't really reduce
    // memory pressure, because they generate multicasts along the
    // way. Hence, they're not marked [memcritical].
    entry void processComputeL(int ignoredParam);
    entry void processComputeU(int ignoredParam);

    entry void solve(bool backward, int size, double d[size]);
    entry void forwardSolve(int size, double d[size]);
    entry void diagForwardSolve(int size, double d[size]);
    entry void backwardSolve(int size, double d[size]);
    entry void diagBackwardSolve(int size, double d[size]);

    entry void flushLogs();
    entry void print();
  };        	

  group BlockCyclicMap : CkArrayMap{
    entry BlockCyclicMap();
  };

  group LUSnakeMap : CkArrayMap{
    entry LUSnakeMap(int, int);
  };

  group LUBalancedSnakeMap : CkArrayMap{
    entry LUBalancedSnakeMap(int, int);
  };

  group LUBalancedSnakeMap2 : CkArrayMap{
    entry LUBalancedSnakeMap2(int, int);
  };

};

module scheduler {
  extern module lu;
  extern module gpuwork;

  class JMessage;

  group Scheduler {
    entry Scheduler();
    entry void tryAgain(int);
    entry void cpuFree(int);
    entry [local] void finishedGPU(std::list<JMessage>);
    entry void checkIn();
  };
};

module gpuwork {
  extern module lu;
  extern module scheduler;

  class JMessage;

  array [1D] GPUWork {
    entry GPUWork();
    entry [local] void gpu_offload(std::list<JMessage>);
  };
};